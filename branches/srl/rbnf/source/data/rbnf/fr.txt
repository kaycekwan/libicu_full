// ***************************************************************************
// *
// *   Copyright © 2008, International Business Machines
// *   Corporation and others. All Rights Reserved.
// *
// ***************************************************************************
// ả

fr { 
    //------------------------------------------------------------
    // Rule Based Number Format Support
    //------------------------------------------------------------

    // Spellout rules for French (France and Canada).

    // * French has some interesting quirks of its own:
    // * The word "et" is interposed between the tens and ones digits,
    // * but only if the ones digit is 1: 20 is "vingt," and 22 is "vingt-deux",
    // * but 21 is "vingt-et-un". The old words for 70, 80, or 90 are not
    // * used (but they are still used in Swiss and Belgian French). Instead,
    // * "quatre-vingts" ("four twenties") is used for 80, and values proceed
    // * by score from 60 to 99 (e.g., 73 is "soixante-treize" ["sixty-thirteen"]).
    // * Hyphen is used between *each* word in a spelled out number, as per modern
    // * French orthography.

    SpelloutRules {
        "%an: =%year=;\n"
        "%year:\n"
            "-x: moins >>;\n"
            "z\u00e9ro; un; deux; trois; quatre; cinq; six; sept; huit; neuf;\n"
            "dix; onze; douze; treize; quatorze; quinze; seize; dix->>;\n"
            "20: vingt[->%%et-un>];\n"
            "30: trente[->%%et-un>];\n"
            "40: quarante[->%%et-un>];\n"
            "50: cinquante[->%%et-un>];\n"
            "60/20: soixante[->%%et-un>];\n"
            "71: soixante-et-onze;\n"
            "72/20: soixante->>;\n"
            "80: quatre-vingts;\n"
            "81/20: quatre-vingt->>;\n" // no "-et"
            "100: cent[->>];\n"
            "200: <<-cent[->>];\n" // there should really be an s if there is no number after cent (see below), don't know any *succinct* rule syntax to express that here
            "10,000: =%number=;\n"

        "%number: =%masculine=;\n"
        "%masculin: =%masculine=;\n"
        "%masculine:\n"
            "-x: moins >>;\n" // not sure if modern orthography requires hyphen here too
            "x.x: << virgule >>;\n" // not sure if modern orthography requires hyphens here too
               // words for numbers from 0 to 10
            "z\u00e9ro; un; deux; trois; quatre; cinq; six; sept; huit; neuf;\n"
            "dix; onze; douze; treize; quatorze; quinze; seize; dix->>;\n" //dix-sept; dix-huit; dix-neuf;\n"
               // words for the multiples of 10: %%et-un inserts "et-" when needed
            "20: vingt[->%%et-un>];\n"
            "30: trente[->%%et-un>];\n"
            "40: quarante[->%%et-un>];\n" // deux-vingts
            "50: cinquante[->%%et-un>];\n" // deux-vingts-dix
               // rule for 60.  The /20 causes this rule's multiplier to be
               // 20 rather than 10, allowinhg us to recurse for all values
               // from 60 to 79...
            "60/20: soixante[->%%et-un>];\n" // trois-vingts, 70: trois-vingt-dix
            "71: soixante-et-onze;\n" // ...except for 71, which must be special-cased, since %%et-un does not handle -et-onze
               // at 72, we have to repeat the rule for 60 to get us to 79
            "72/20: soixante->>;\n"
               // at 80, we state a new rule with the phrase for 80. Since
               // it changes form when there's a ones digit, we need a second
               // rule at 81.  This rule also includes "/20," allowing it to
               // be used correctly for all values up to 99. Note that -et-un is not used, just -un.
            "80: quatre-vingts;\n" // huitante, octante
            "81/20: quatre-vingt->>;\n" // no "-et"
             //90, quatre-vingt-dix, nonante; 91, quatre-vingt-onze (no -et)
               // "cent" becomes plural when preceded by a multiplier but not followed by a number spellout
            "100: cent[->>];\n" // quinze-vingts
            "200: <<-cents; 201: <<-cent->>;\n"
            "300: <<-cents; 301: <<-cent->>;\n"
            "400: <<-cents; 401: <<-cent->>;\n"
            "500: <<-cents; 501: <<-cent->>;\n"
            "600: <<-cents; 601: <<-cent->>;\n"
            "700: <<-cents; 701: <<-cent->>;\n"
            "800: <<-cents; 801: <<-cent->>;\n"
            "900: <<-cents; 901: <<-cent->>;\n"
            "1000: mille[->>];\n"
               // values from 1,100 to 1,199 are rendered as "onze cents..."
               // instead of "mille cent..."  The > after "1000" decreases
               // the rule's exponent, causing its multiplier to be 100 instead
               // of 1,000.  This prevents us from getting "onze cents cent
               // vingt-deux" ("eleven hundred one hundred twenty-two").
            //"1100>: onze cents[ >>];\n"  this is NOT supported by wikipedia: http://fr.wikipedia.org/wiki/Nombres_en_fran%C3%A7ais; hence commented out rule
               // at 1,200, we go back to formating in thousands, so we
               // repeat the rule for 1,000
            //"1200: mille->>;\n" not needed now
               // at 2,000, the multiplier is added
            "2000: <%masculine<-mille[->>];\n"
            "1,000,000: un-million[->>];\n"
            "2,000,000: <%masculine<-millions[->>];\n"
            "1,000,000,000: un-milliard[->>];\n"
            "2,000,000,000: <%masculine<-milliards[->>];\n"
            "1,000,000,000,000: un-billion[->>];\n"
            "2,000,000,000,000: <%masculine<-billions[->>];\n"
            "1,000,000,000,000,000: un-billiard[->>];\n"
            "2,000,000,000,000,000: <%masculine<-billiards[->>];\n"
            "1,000,000,000,000,000,000: =#,##0.#=;\n"
/* 
 * Current (Java) implementation can't handle these magnitudes
            "1,000,000,000,000,000,000: un-trillion[->>];\n"
            "2,000,000,000,000,000,000: <%masculine<-trillions[->>];\n"
 * Current (C++) implmenatation can't handle these magnitudes
            "1,000,000,000,000,000,000,000: un-trilliard[->>];\n"
            "2,000,000,000,000,000,000,000: <%masculine<-trilliards[->>];\n"
            "1,000,000,000,000,000,000,000,000: un-quadrillion[->>];\n"
            "2,000,000,000,000,000,000,000,000: <%masculine<-quadrillions[->>];\n"
            "1,000,000,000,000,000,000,000,000,000: un-quadrilliard[->>];\n"
            "2,000,000,000,000,000,000,000,000,000: <%masculine<-quadrilliards[->>];\n"
            "1,000,000,000,000,000,000,000,000,000,000: un-quintillion[->>];\n"
            "2,000,000,000,000,000,000,000,000,000,000: <%masculine<-quintillions[->>];\n"
            "1,000,000,000,000,000,000,000,000,000,000,000: un-quintilliard[->>];\n"
            "2,000,000,000,000,000,000,000,000,000,000,000: <%masculine<-quintilliards[->>];\n"
            "1,000,000,000,000,000,000,000,000,000,000,000,000: un-sextillion[->>];\n"
            "2,000,000,000,000,000,000,000,000,000,000,000,000: <%masculine<-sextillions[->>];\n"
            "1,000,000,000,000,000,000,000,000,000,000,000,000,000: un-sextilliard[->>];\n"
            "2,000,000,000,000,000,000,000,000,000,000,000,000,000: <%masculine<-sextilliards[->>];\n"
            "1,000,000,000,000,000,000,000,000,000,000,000,000,000,000: =#,##0.#=;\n"
*/
        // %%et-un is used to insert "et" when the ones digit is 1
        "%%et-un:\n"
            "; et-un; =%masculine=;\n" 

        "%féminin: =%feminine=;\n"
        "%feminine:\n"
            "-x: moins >>;\n"
            "x.x: << virgule >>;\n"
            "z\u00e9ro; une; deux; trois; quatre; cinq; six; sept; huit; neuf;\n"
            "dix; onze; douze; treize; quatorze; quinze; seize; dix->>;\n"
            "20: vingt[->%%et-une>];\n"
            "30: trente[->%%et-une>];\n"
            "40: quarante[->%%et-une>];\n"
            "50: cinquante[->%%et-une>];\n"
            "60/20: soixante[->%%et-une>];\n"
            "71: soixante-et-onze;\n"
            "72/20: soixante->>;\n"
            "80: quatre-vingts;\n"
            "81/20: quatre-vingt->>;\n" // no "-et"
            "100: cent[->>];\n"
            "200: <<-cents; 201: <<-cent->>;\n"
            "300: <<-cents; 301: <<-cent->>;\n"
            "400: <<-cents; 401: <<-cent->>;\n"
            "500: <<-cents; 501: <<-cent->>;\n"
            "600: <<-cents; 601: <<-cent->>;\n"
            "700: <<-cents; 701: <<-cent->>;\n"
            "800: <<-cents; 801: <<-cent->>;\n"
            "900: <<-cents; 901: <<-cent->>;\n"
            "1000: mille[->>];\n"
            "2000: <%masculine<-mille[->>];\n"
            "1,000,000: un-million[->>];\n"
            "2,000,000: <%masculine<-millions[->>];\n"
            "1,000,000,000: un-milliard[->>];\n"
            "2,000,000,000: <%masculine<-milliards[->>];\n"
            "1,000,000,000,000: un-billion[->>];\n"
            "2,000,000,000,000: <%masculine<-billions[->>];\n"
            "1,000,000,000,000,000: un-billiard[->>];\n"
            "2,000,000,000,000,000: <%masculine<-billiards[->>];\n"
            "1,000,000,000,000,000,000: =#,##0.#=;\n"
/* 
 * Current (Java) implementation can't handle these magnitudes
            "1,000,000,000,000,000,000: un-trillion[->>];\n"
            "2,000,000,000,000,000,000: <%masculine<-trillions[->>];\n"
 * Current (C++) implmenatation can't handle these magnitudes
            "1,000,000,000,000,000,000,000: un-trilliard[->>];\n"
            "2,000,000,000,000,000,000,000: <%masculine<-trilliards[->>];\n"
            "1,000,000,000,000,000,000,000,000: un-quadrillion[->>];\n"
            "2,000,000,000,000,000,000,000,000: <%masculine<-quadrillions[->>];\n"
            "1,000,000,000,000,000,000,000,000,000: un-quadrilliard[->>];\n"
            "2,000,000,000,000,000,000,000,000,000: <%masculine<-quadrilliards[->>];\n"
            "1,000,000,000,000,000,000,000,000,000,000: un-quintillion[->>];\n"
            "2,000,000,000,000,000,000,000,000,000,000: <%masculine<-quintillions[->>];\n"
            "1,000,000,000,000,000,000,000,000,000,000,000: un-quintilliard[->>];\n"
            "2,000,000,000,000,000,000,000,000,000,000,000: <%masculine<-quintilliards[->>];\n"
            "1,000,000,000,000,000,000,000,000,000,000,000,000: un-sextillion[->>];\n"
            "2,000,000,000,000,000,000,000,000,000,000,000,000: <%masculine<-sextillions[->>];\n"
            "1,000,000,000,000,000,000,000,000,000,000,000,000,000: un-sextilliard[->>];\n"
            "2,000,000,000,000,000,000,000,000,000,000,000,000,000: <%masculine<-sextilliards[->>];\n"
            "1,000,000,000,000,000,000,000,000,000,000,000,000,000,000: =#,##0.#=;\n"
*/
        // %%et-une is used to insert "et" when the ones digit is 1
        "%%et-une:\n"
            "; et-une; =%feminine=;\n" 

			//02B3;MODIFIER LETTER SMALL R;Lm;0;L;<super> 0072;;;;N;;;;;
			//1D49;MODIFIER LETTER SMALL E;Lm;0;L;<super> 0065;;;;N;;;;;
        "%dord_masculine:\n"
            "=#,##0==%%dord_mascabbrev=;\n"
        "%%dord_mascabbrev:\n"
            //"e; er; e;\n" // to do: use superscript letters, 
            "\u1D49; \u1D49\u02B3; \u1D49;\n"

        "%dord_feminine:\n"
            "=#,##0==%%dord_femabbrev=;\n"
        "%%dord_femabbrev:\n"
            //"e; re; e;\n" // to do: use superscript letters, 
            "\u1D49; \u02B3\u1D49; \u1D49;\n"

        "%amount: =%masculine=;\n"
        "%main: =%amount=;\n" // default (must be last public name); named for for backwards compatibility
        "%%lenient-parse:\n"
        "   &\u0000 << ' ' << ',' << '-'; \n"
    }
    SpelloutLocalizations {
        { "%number", "%year", "%masculine", "%feminine",
        }
        { "fr", 
          "nombre", "an", "masculin", "féminin",
        }
        { "en", 
          "number", "year", "masculine", "feminine",
        }
    }
}
