# Copyright (c) 2012-2013 International Business Machines
# Corporation and others. All Rights Reserved.
#
# This file should be in UTF-8 with a signature byte sequence ("BOM").
#
# collationtest.txt: Collation test data.
#
# created on: 2012apr13
# created by: Markus W. Scherer

# A line with "** test: description" is used for verbose and error output.

# A collator can be built with "@ rawbase" or "@ rules".
# "@ rawbase" is followed by lines that each contain a string and a list of CEs.
# An empty leading weight is 0. An empty weight after a non-empty one is a common weight.

# TODO: "@ locale de-u-co-phonebk"

# A collator can be modified with "% attribute=value".

# "* CEs" tests that the following strings map to their expected CEs.
# It is fragile unless used with "@ rawbase".
# It only tests CollationIterator which is not sensitive to most attributes.

# "* compare" tests the order (= or <) of the following strings.
# The relation can be "=" or "<" (the level of the difference is not specified)
# or "<1", "<2", "<c", "<3", "<4" (indicating the level of the difference).

# Test sections ("* CEs" and "* compare") are terminated by
# definitions of new collators, changing attributes, or new test sections.

** test: simple CEs & expansions
@ rawbase
\x00    11..           # NUL not ignorable
\x01    ..             # ^A ignorable
ä       27.. .9d.       # a-umlaut = mini expansion 27.05.05 .9d.05
a       27..            # a = 27.05.05
b       29..
\u0301  .8d88.          # long-secondary .8d88.05
\u0300  ..2233          # long-tertiary ..2233
か       7916..9b        # Hiragana Ka (U+304B)
が       7916..9b .da95. # Hiragana Ga (U+304C)
\u3099  .da95.          # voiced sound mark
\u309a  .daa5.          # semi-voiced sound mark
\ua001  7a700c..        # Yi Syllable IX = long-primary 7a700C.05.05
\ua002  7a700c.. 7a7014..  # two long-primary CEs
\ua003  7a700c.. 7a7014.. 7a701c03..  # three CEs, require 64 bits
# TODO: Test long and/or duplicate expansions.

* CEs
\x01\x00b               .. 11.. 29..
äa\u0301\u0300          27.. .9d. 27.. .8d88. ..2233
a\u3099か\u3099b         27.. .da95. 7916..9b .da95. 29..
aがb                     27.. 7916..9b .da95. 29..
\ua001\ua002\ua003      7a700c..  7a700c.. 7a7014..  7a700c.. 7a7014.. 7a701c03..

# TODO: Test U+0000, U+FFFE, U+FFFF
# TODO: Interesting FCD tests
# TODO: Try combinations of base vs. tailoring for discontiguous & nested contractions,
#       to test fallbacks and fetching inner CEs from the original data.
# TODO: Test CODAN with first digit in base and others in tailoring.
# TODO: Test prefix, contraction+expansion, prefix+contraction, p+c+e
# TODO: Test Hangul syllables with * CEs

** test: contractions
@ rawbase

# Contractions starting with 'a' should not continue with any character < U+0300
# so that we can test a shortcut for that.
a                   27..
b                   29..
bz                  2a03..
d                   2d..
dz\u0301            2e03..      # d+z+acute
z                   59..
a\u0301             5a03..      # a+acute sorts after z
a\u0301\u0301       5a04..      # a+acute+acute
a\u0301\u0301\u0358 5a05..      # a+acute+acute+dot above right
a\u030a             5a14..      # a+ring
a\u0323             5a15..      # a+dot below
a\u0323\u0358       5a16..      # a+dot below+dot above right
a\u0327\u0323\u030a 5a17..      # a+cedilla+dot below+ring
a\u0327\u0323bz     5a18..      # a+cedilla+dot below+b+z

\U0001D158          0dc9fc..    # musical notehead black
\U0001D158\U0001D165 0dc9fd..   # musical quarter note

# deliberately missing prefix contractions:
# az
# a\u0327
# a\u0327\u0323
# a\u0327\u0323b

\U0001D165          ..1f        # musical stem (ccc=216)
\U0001D16D          ..20        # musical augmentation dot (ccc=226)
\U0001D165\U0001D16D ..21       # stem+dot (ccc=216 226)
\u0301              .8d.        # acute (ccc=230)
\u030a              .99.        # ring (ccc=230)
\u0308              .9d.        # diaeresis (ccc=230)
\u0308\u0301        .9e.        # diaeresis+acute (=dialytika tonos) (ccc=230 230)
\u0327              .a7.        # cedilla (ccc=202)
\u0323              .c5.        # dot below (ccc=220)
\u0331              .d01d.      # macron below (ccc=220)
\u0331\u0358        .d01e.      # macron below+dot above right (ccc=220 232)
\u0334              .d02d.      # tilde overlay (ccc=1)
\u0358              .d06d.      # dot above right (ccc=232)

\u0f71              74aa..      # tibetan vowel sign aa
\u0f72              74ac..      # tibetan vowel sign i
\u0f71\u0f72        74ae..      # tibetan vowel sign aa + i = ii
\u0f73              74ae..      # tibetan vowel sign ii (ccc=0 but lccc=129)

** test: simple contractions

# Some strings are chosen to cause incremental contiguous contraction matching to
# go into partial matches for prefixes of contractions
# (where the prefixes are deliberately not also contractions).
# When there is no complete match, then the matching code must back out of those
# so that discontiguous contractions work as specified.

* CEs
# contraction starter with no following text, or mismatch, or blocked
a                       27..
aa                      27.. 27..  
ab                      27.. 29..
az                      27.. 59..
a\u0308\u030a           27.. .9d. .99.  # ring blocked by diaeresis
a\u0327                 27.. .a7.
\u0308                  .9d.
\u0308\u030a\u0301      .9d. .99. .8d.  # acute blocked by ring
\U0001D158              0dc9fc..

# no discontiguous contraction because of missing prefix contraction d+z,
# and a starter ('z') after the 'd'
dz\u0323\u0301          2d.. 59.. .c5. .8d.

# contiguous contractions
abz                     27.. 2a03..
abzz                    27.. 2a03.. 59..
a\u0301                 5a03..
a\u0301\u0301           5a04..
a\u0301\u0301\u0358     5a05..
a\u030a                 5a14..
a\u0323\u0358           5a16..
a\u0327\u0323\u030a     5a17..  # match despite missing prefix
a\u0327\u0323bz         5a18..
\u0308\u0308\u0301      .9d. .9e.  # acute blocked from first diaeresis, contracts with second

\U0001D158\U0001D165    0dc9fd..
\U0001D165\U0001D16D    ..21

** test: discontiguous contractions
* CEs
a\u0327\u030a           5a14.. .a7.                 # a+ring skips cedilla
a\u0327\u0327\u030a     5a14.. .a7. .a7.            # a+ring skips 2 cedillas
a\u0327\u0327\u0327\u030a  5a14.. .a7. .a7. .a7.    # a+ring skips 3 cedillas
a\u0334\u0327\u0327\u030a  5a14.. .d02d. .a7. .a7.  # a+ring skips tilde overlay & 2 cedillas
a\u0327\u0323           5a15.. .a7.                 # a+dot below skips cedilla
a\u0334\u0323\u0358     5a16.. .d02d.               # a+dot below skips tilde overlay
a\u0323\u0301\u0358     5a16.. .8d.                 # a+dot below+dot ab.r.: 2-char match, then skips acute
\u0331\u0331\u0358      .d01e. .d01d.               # macron below+dot ab.r. skips the second macron below

a\u0334\u0327\u0323\u030a   5a15.. .d02d. .a7. .99. # a+dot below skips tilde overlay & cedilla
a\u0327\u0327\u0323\u030a   5a15.. .a7. .a7. .99.   # a+dot below skips 2 cedillas
a\u0327\u0323\u0323\u030a   5a15.. .a7. .c5. .99.   # a+dot below skips cedilla
a\u0327\u0323\U0001D16D\u030a 5a15.. .a7. ..20 .99. # a+dot below skips cedilla
a\u0327\u0331\u0323\u030a   5a14.. .a7. .d01d. .c5. # a+ring skips cedilla macron below, dot below (dot blocked by macron)

\U0001D158\u0327\U0001D165  0dc9fd.. .a7.           # quarter note skips cedilla
a\U0001D165\u0323           5a15.. ..1f             # a+dot below skips stem

# partial contiguous match, backs up, matches discontiguous contraction
a\u0327\u0323b              5a15.. .a7. 29..
a\u0327\u0323ba             5a15.. .a7. 29.. 27..

# a+acute+acute+dot above right skips cedilla, continues matching 2 same-ccc combining marks
a\u0327\u0301\u0301\u0358   5a05.. .a7.

# FCD but not NFD
a\u0f73\u0301               5a03.. 74ae..           # a+acute skips tibetan ii

# FCD but the 0f71 inside the 0f73 must be skipped
# to match the discontiguous contraction of the first 0f71 with the trailing 0f72 inside the 0f73
\u0f71\u0f73                74ae.. 74aa..           # == \u0f73\u0f71 == \u0f71\u0f71\u0f72

** test: discontiguous contractions with nested contractions
* CEs
a\u0323\u0308\u0301\u0358   5a16.. .9e.
a\u0323\u0308\u0301\u0308\u0301\u0358   5a16.. .9e. .9e.

** test: discontiguous contractions with interleaved contractions
* CEs
# a+ring & cedilla & macron below+dot above right
a\u0327\u0331\u030a\u0358   5a14.. .a7. .d01e.

# a+ring & 1x..3x macron below+dot above right
a\u0331\u030a\u0358                             5a14.. .d01e.
a\u0331\u0331\u030a\u0358\u0358                 5a14.. .d01e. .d01e.
# also skips acute
a\u0331\u0331\u0331\u030a\u0301\u0358\u0358\u0358  5a14.. .d01e. .d01e. .d01e. .8d.

# a+dot below & stem+augmentation dot, followed by contiguous d+z+acute
a\U0001D165\u0323\U0001D16Ddz\u0301             5a15.. ..21 2e03..

** test: some simple string comparisons
@ root
* compare
# first string compares against ""
= \u0000
< a
<1 b
<3 B
= \u0000B\u0000

** test: compare with strength=primary
% strength=primary
* compare
<1 a
<1 b
= B

** test: compare with strength=secondary
% strength=secondary
* compare
<1 a
<1 b
= B

** test: compare with strength=tertiary
% strength=tertiary
* compare
<1 a
<1 b
<3 B

** test: compare with strength=quaternary
% strength=quaternary
* compare
<1 a
<1 b
<3 B

** test: compare with strength=identical
% strength=identical
* compare
<1 a
<1 b
<3 B

** test: côté with forwards secondary
@ root
* compare
<1 cote
<2 coté
<2 côte
<2 côté

** test: côté with forwards secondary vs. U+FFFE merge separator
# Merged sort keys: On each level, any difference in the first segment
# must trump any further difference.
* compare
<1 cote\uFFFEcôté
<2 coté\uFFFEcôte
<2 côte\uFFFEcoté
<2 côté\uFFFEcote

** test: côté with backwards secondary
% backwards=on
* compare
<1 cote
<2 côte
<2 coté
<2 côté

** test: côté with backwards secondary vs. U+FFFE merge separator
# Merged sort keys: On each level, any difference in the first segment
# must trump any further difference.
* compare
<1 cote\uFFFEcôté
<2 côte\uFFFEcoté
<2 coté\uFFFEcôte
<2 côté\uFFFEcote

** test: U+FFFE on identical level
@ root
% strength=identical
* compare
# All of these control codes are completely-ignorable, so that
# their low code points are compared with the merge separator.
# The merge separator must compare less than any other character.
<1 \uFFFE\u0001\u0002\u0003
<i \u0001\uFFFE\u0002\u0003
<i \u0001\u0002\uFFFE\u0003
<i \u0001\u0002\u0003\uFFFE

* compare
# The merge separator must even compare less than U+0000.
<1 \uFFFE\u0000\u0000
<i \u0000\uFFFE\u0000
<i \u0000\u0000\uFFFE

** test: Hani < surrogates < U+FFFD
# Note: compareUTF8() treats unpaired surrogates like U+FFFD,
# so with that the strings with surrogates will compare equal to each other
# and equal to the string with U+FFFD.
@ root
% strength=identical
* compare
<1 abz
<1 a\u4e00z
<1 a\U00020000z
<1 a\ud800z
<1 a\udbffz
<1 a\udc00z
<1 a\udfffz
<1 a\ufffdz

** test: script reordering
@ root
% reorder Hani Zzzz digit
* compare
<1 ?
<1 +
<1 丂
<1 a
<1 α
<1 5

% reorder default
* compare
<1 ?
<1 +
<1 5
<1 a
<1 α
<1 丂

** test: empty rules
@ rules
* compare
<1 a
<2 ä
<3 Ä
<1 b

** test: very simple rules
@ rules
&a=e<<<<q<<<<r<x<<<X<<y<<<Y;z,Z
% strength=quaternary
* compare
<1 a
=  e
<4 q
<4 r
<1 x
<3 X
<2 y
<3 Y
<2 z
<3 Z

** test: tailoring twice before a root position: primary
@ rules
&[before 1]b<p
&[before 1]b<q
* compare
<1 a
<1 p
<1 q
<1 b

** test: tailoring twice before a root position: secondary
@ rules
&[before 2]ſ<<p
&[before 2]ſ<<q
* compare
<1 s
<2 p
<2 q
<2 ſ

# secondary-before common weight
@ rules
&[before 2]b<<p
&[before 2]b<<q
* compare
<1 a
<1 p
<2 q
<2 b

** test: tailoring twice before a root position: tertiary
@ rules
&[before 3]B<<<p
&[before 3]B<<<q
* compare
<1 b
<3 p
<3 q
<3 B

# tertiary-before common weight
@ rules
&[before 3]b<<<p
&[before 3]b<<<q
* compare
<1 a
<1 p
<3 q
<3 b

@ rules
&[before 2]b<<s
&[before 3]s<<<p
&[before 3]s<<<q
* compare
<1 a
<1 p
<3 q
<3 s
<2 b

** test: tailor after completely ignorable
@ rules
&\x00<<<x<<y
* compare
= \x00
= \x1F
<3 x
<2 y

** test: secondary tailoring gaps, ICU ticket 9362
@ rules
&[before 2]s<<'_'
&s<<r  # secondary between s and ſ (long s)
&ſ<<*a-q  # more than 15 between ſ and secondary CE boundary
&[before 2][first primary ignorable]<<u<<v  # between secondary CE boundary & lowest secondary CE
&[last primary ignorable]<<y<<z

* compare
<2 u
<2 v
<2 \u0332  # lowest secondary CE
<2 \u0308
<2 y
<2 z
<1 s_
<2 ss
<2 sr
<2 sſ
<2 sa
<2 sb
<2 sp
<2 sq
<2 sus
<2 svs
<2 rs

** test: tertiary tailoring gaps, ICU ticket 9362
@ rules
&[before 3]t<<<'_'
&t<<<r  # tertiary between t and fullwidth t
&ᵀ<<<*a-q  # more than 15 between ᵀ (modifier letter T) and tertiary CE boundary
&[before 3][first secondary ignorable]<<<u<<<v  # between tertiary CE boundary & lowest tertiary CE
&[last secondary ignorable]<<<y<<<z

* compare
<3 u
<3 v
# Note: The root collator currently does not map any characters to tertiary CEs.
<3 y
<3 z
<1 t_
<3 tt
<3 tr
<3 tｔ
<3 tᵀ
<3 ta
<3 tb
<3 tp
<3 tq
<3 tut
<3 tvt
<3 rt

** test: secondary & tertiary around root character
@ rules
&[before 2]m<<r
&m<<s
&[before 3]m<<<u
&m<<<v
* compare
<1 l
<1 r
<2 u
<3 m
<3 v
<2 s
<1 n

** test: secondary & tertiary around tailored item
@ rules
&m<x
&[before 2]x<<r
&x<<s
&[before 3]x<<<u
&x<<<v
* compare
<1 m
<1 r
<2 u
<3 x
<3 v
<2 s
<1 n

** test: more nesting of secondary & tertiary before
@ rules
&[before 3]m<<<u
&[before 2]m<<r
&[before 3]r<<<q
&m<<<w
&m<<t
&[before 3]w<<<v
&w<<<x
&w<<s
* compare
<1 l
<1 q
<3 r
<2 u
<3 m
<3 v
<3 w
<3 x
<2 s
<2 t
<1 n

** test: case bits
@ rules
&w<x  # tailored CE getting case bits
  =uv=uV=Uv=UV  # 2 chars -> 1 CE
&ae=ch=cH=Ch=CH  # 2 chars -> 2 CEs
&rst=yz=yZ=Yz=YZ  # 2 chars -> 3 CEs
% caseFirst=lower
* compare
<1 ae
=  ch
<3 cH
<3 Ch
<3 CH
<1 rst
=  yz
<3 yZ
<3 Yz
<3 YZ
<1 w
<1 x
=  uv
<3 uV
=  Uv  # mixed case on single CE cannot distinguish variations
<3 UV

** test: tertiary CEs, tertiary, caseLevel=off, caseFirst=lower
@ rules
&\u0001<<<t<<<T  # tertiary CEs
% caseFirst=lower
* compare
<1 aa
<3 aat
<3 aaT
<3 aA
<3 aAt
<3 ata
<3 aTa

** test: tertiary CEs, tertiary, caseLevel=off, caseFirst=upper
% caseFirst=upper
* compare
<1 aA
<3 aAt
<3 aa
<3 aat
<3 aaT
<3 ata
<3 aTa

** test: reset on expansion, ICU tickets 9415 & 9593
@ rules
&æ<x    # tailor the last primary CE so that x sorts between ae and af
&æb=bæ  # copy all reset CEs to make bæ sort the same
&각<h    # copy/tailor 3 CEs to make h sort before the next Hangul syllable 갂
&⒀<<y   # copy/tailor 4 CEs to make y sort with only a secondary difference
&l·=z   # handle the pre-context for · when fetching reset CEs
   <<u  # copy/tailor 2 CEs

* compare
<1 ae
<2 æ
<1 x
<1 af

* compare
<1 aeb
<2 æb
=  bæ

* compare
<1 각
<1 h
<1 갂
<1 갃

* compare
<1 ·    # by itself: primary CE
<1 l
<2 l·   # l+middle dot has only a secondary difference from l
=  z
<2 u

* compare
<1 (13)
<3 ⒀  # DUCET sets special tertiary weights in all CEs
<2 y
<1 (13[

% alternate=shifted
* compare
<1 (13)
=  13
<3 ⒀
=  y  # alternate=shifted removes the tailoring difference on the last CE
<1 14

** test: contraction inside extension, ICU ticket 9378
@ rules
&а<<х/й     # all letters are Cyrillic
* compare
<1 ай
<2 х

** test: no duplicate tailored CEs for different reset positions with same CEs, ICU ticket 10104
@ rules
&t<x &ᵀ<y           # same primary weights
&q<u &[before 1]ꝗ<v # q and ꝗ are primary adjacent
* compare
<1 q
<1 u
<1 v
<1 ꝗ
<1 t
<3 ᵀ
<1 y
<1 x

# Principle: Each rule builds on the state of preceding rules and ignores following rules.

** test: later rule does not affect earlier reset position, ICU ticket 10105
@ rules
&a < u < v < w  &ov < x  &b < v
* compare
<1 oa
<1 ou
<1 x    # CE(o) followed by CE between u and w
<1 ow
<1 ob
<1 ov

** test: later rule does not affect earlier extension (1), ICU ticket 10105
@ rules
&a=x/b &v=b
% strength=secondary
* compare
<1 B
<1 c
<1 v
=  b
* compare
<1 AB
=  x
<1 ac
<1 av
=  ab

** test: later rule does not affect earlier extension (2), ICU ticket 10105
@ rules
&a <<< c / e &g <<< e / l
% strength=secondary
* compare
<1 AE
=  c
<2 æ
<1 agl
=  ae

** test: later rule does not affect earlier extension (3), ICU ticket 10105
@ rules
&a = b / c  &d = c / e
% strength=secondary
* compare
<1 AC  # C is still only tertiary different from the original c
=  b
<1 ade
=  ac

** test: extension contains tailored character, ICU ticket 10105
@ rules
&a=e &b=u/e
* compare
<1 a
=  e
<1 ba
=  be
=  u

** test: add simple mappings for characters with root context
@ rules
&z=·    # middle dot has a prefix mapping in the CLDR root
&n=и    # и (U+0438) has contractions in the root
* compare
<1 l
<2 l·   # root mapping for l|· still works
<1 z
=  ·
* compare
<1 n
=  и
<1 И
<1 и\u0306  # root mapping for й=и\u0306 still works
=  й
<3 Й

** test: add context mappings around characters with root context
@ rules
&z=·h   # middle dot has a prefix mapping in the CLDR root
&n=ә|и  # и (U+0438) has contractions in the root
* compare
<1 l
<2 l·   # root mapping for l|· still works
<1 z
=  ·h
* compare
<1 и
<3 И
<1 и\u0306  # root mapping for й=и\u0306 still works
=  й
* compare
<1 әn
=  әи
<1 әo

** test: many secondary CEs at the top of their range
@ rules
&[last primary ignorable]<<*\u2801-\u28ff
* compare
<2 \u0308
<2 \u2801
<2 \u2802
<2 \u2803
<2 \u2804
<2 \u28fd
<2 \u28fe
<2 \u28ff
<1 \x20

** test: many tertiary CEs at the top of their range
@ rules
&[last secondary ignorable]<<<*a-z
* compare
<3 a
<3 b
<3 c
<3 d
# e..w
<3 x
<3 y
<3 z
<2 \u0308

** test: tailor contraction together with nearly equivalent prefix, ICU ticket 10101
@ rules
&a=p|x &b=px &c=op
* compare
<1 b
=  px
<3 B
<1 c
=  op
<3 C
* compare
<1 ca
=  opx  # first contraction op, then prefix p|x
<3 cA
<3 Ca

** test: reset position with prefix (pre-context), ICU ticket 10102
@ rules
&a=p|x &px=y
* compare
<1 pa
=  px
=  y
<3 pA
<1 q
<1 x

** test: prefix+contraction together (1), ICU ticket 10071
@ rules
&x=a|bc
* compare
<1 ab
<1 Abc
<1 abd
<1 ac
<1 aw
<1 ax
=  abc
<3 aX
<3 Ax
<1 b
<1 bb
<1 bc
<3 bC
<3 Bc
<1 bd

** test: prefix+contraction together (2), ICU ticket 10071
@ rules
&w=bc &x=a|b
* compare
<1 w
=  bc
<3 W
* compare
<1 aw
<1 ax
=  ab
<3 aX
<1 axb
<1 axc
=  abc  # prefix match a|b takes precedence over contraction match bc
<3 abC
<1 abd
<1 ay

** test: prefix+contraction together (3), ICU ticket 10071
@ rules
&x=a|b &w=bc    # reverse order of rules as previous test, order should not matter here
* compare       # same "compare" sequences as previous test
<1 w
=  bc
<3 W
* compare
<1 aw
<1 ax
=  ab
<3 aX
<1 axb
<1 axc
=  abc  # prefix match a|b takes precedence over contraction match bc
<3 abC
<1 abd
<1 ay

** test: no mapping p|c, falls back to contraction ch, CLDR ticket 5962
@ rules
&d=ch &v=p|ci
* compare
<1 pc
<3 pC
<1 pcH
<1 pcI
<1 pd
=  pch  # no-prefix contraction ch matches
<3 pD
<1 pv
=  pci  # prefix+contraction p|ci matches
<3 pV

** test: tailor in & around compact ranges of root primaries
# The Ogham characters U+1681..U+169A are in simple ascending order of primary CEs
# which should be reliably encoded as one range in the root elements data.
@ rules
&[before 1]ᚁ<a
&ᚁ<b
&[before 1]ᚂ<c
&ᚂ<d
&[before 1]ᚚ<y
&ᚚ<z
&[before 2]ᚁ<<r
&ᚁ<<s
&[before 3]ᚚ<<<t
&ᚚ<<<u
* compare
<1 ᣵ    # U+18F5 last Canadian Aboriginal
<1 a
<1 r
<2 ᚁ
<2 s
<1 b
<1 c
<1 ᚂ
<1 d
<1 ᚃ
<1 ᚙ
<1 y
<1 t
<3 ᚚ
<3 u
<1 z
<1 ᚠ    # U+16A0 first Runic

** test: suppressContractions
@ rules
&z<ch<әж [suppressContractions [·cә]]
* compare
<1 ch
<3 cH   # ch was suppressed
<1 l
<1 l·   # primary difference, not secondary, because l|· was suppressed
<1 ә
<2 ә\u0308  # secondary difference, not primary, because contractions for ә were suppressed
<1 әж
<3 әЖ

** test: Hangul & Jamo
@ rules
&L=\u1100  # first Jamo L
&V=\u1161  # first Jamo V
&T=\u11A8  # first Jamo T
&\uAC01<<*\u4E00-\u4EFF  # first Hangul LVT syllable & lots of secondary diffs
* compare
<1 Lv
<3 LV
=  \u1100\u1161
=  \uAC00
<1 LVt
<3 LVT
=  \u1100\u1161\u11A8
=  \uAC00\u11A8
=  \uAC01
<2 LVT\u0308
<2 \u4E00
<2 \u4E01
<2 \u4E80
<2 \u4EFF
<2 LV\u0308T
<1 \uAC02

** test: adjust special reset positions according to previous rules, CLDR ticket 6070
@ rules
&[last variable]<x
[maxVariable space]  # has effect only after building, no effect on following rules
&[last variable]<y
&[before 1][first regular]<z
* compare
<1 ?  # some punctuation
<1 x
<1 y
<1 z
<1 $  # some symbol

@ rules
&[last primary ignorable]<<x<<<y
&[last primary ignorable]<<z
* compare
<2 \u0358
<2 x
<3 y
<2 z
<1 \x20

@ rules
&[last secondary ignorable]<<<x
&[last secondary ignorable]<<<y
* compare
<3 x
<3 y
<2 \u0358

@ rules
&[before 2][first variable]<<z
&[before 2][first variable]<<y
&[before 3][first variable]<<<x
&[before 3][first variable]<<<w
&[before 1][first variable]<v
&[before 2][first variable]<<u
&[before 3][first variable]<<<t
&[before 2]\uFDD1\xA0<<s  # FractionalUCA.txt: FDD1 00A0, SPACE first primary
* compare
<2 \u0358
<1 s
<2 \uFDD1\xA0
<1 t
<3 u
<2 v
<1 w
<3 x
<3 y
<2 z
<2 \t

@ rules
&[before 2][first regular]<<z
&[before 3][first regular]<<<y
&[before 1][first regular]<x
&[before 3][first regular]<<<w
&[before 2]\uFDD1\u263A<<v  # FractionalUCA.txt: FDD1 263A, SYMBOL first primary
&[before 3][first regular]<<<u
&[before 1][first regular]<p  # primary before the boundary: becomes variable
&[before 3][first regular]<<<t  # not affected by p
&[last variable]<q              # after p!
* compare
<1 ?
<1 p
<1 q
<1 t
<3 u
<3 v
<1 w
<3 x
<1 y
<3 z
<1 $

# check that p & q are indeed variable
% alternate=shifted
* compare
=  ?
=  p
=  q
<1 t
<3 u
<3 v
<1 w
<3 x
<1 y
<3 z
<1 $

@ rules
&[before 2][first trailing]<<z
&[before 1][first trailing]<y
&[before 3][first trailing]<<<x
* compare
<1 \u4E00  # first Han, first implicit
<1 \uFDD1\uFDD0  # FractionalUCA.txt: unassigned first primary
# Note: The root collator currently does not map any characters to the trailing first boundary primary.
<1 x
<3 y
<1 z
<2 \uFFFD  # The root collator currently maps U+FFFD to the first real trailing primary.

@ rules
&[before 2][first primary ignorable]<<z
&[before 2][first primary ignorable]<<y
&[before 3][first primary ignorable]<<<x
&[before 3][first primary ignorable]<<<w
* compare
=  \x01
<2 w
<3 x
<3 y
<2 z
<2 \u0301

@ rules
&[before 3][first secondary ignorable]<<<y
&[before 3][first secondary ignorable]<<<x
* compare
=  \x01
<3 x
<3 y
<2 \u0301

** test: canonical closure
@ rules
&X=A &U=Â
* compare
<1 U
=  Â
=  A\u0302
<2 Ú  # U with acute
=  U\u0301
=  Ấ  # A with circumflex & acute
=  Â\u0301
=  A\u0302\u0301
<1 X
=  A
<2 X\u030A  # with ring above
=  Å
=  A\u030A
=  \u212B  # Angstrom sign

@ rules
&x=ä|ŝ
* compare
<1 äs  # not tailored
<1 äx
=  äŝ
=  a\u0308s\u0302
=  a\u0308ŝ
=  äs\u0302
<3 äX
