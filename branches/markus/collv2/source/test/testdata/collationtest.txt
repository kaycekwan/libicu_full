# Copyright (c) 2012-2013 International Business Machines
# Corporation and others. All Rights Reserved.
#
# This file should be in UTF-8 with a signature byte sequence ("BOM").
#
# collationtest.txt: Collation test data.
#
# created on: 2012apr13
# created by: Markus W. Scherer

** test: simple CEs & expansions
@ rawbase
\x00    11..           # NUL not ignorable
\x01    ..             # ^A ignorable
ä       27.. .9d.       # a-umlaut = mini expansion 27.05.05 .9d.05
a       27..            # a = 27.05.05
b       29..
\u0301  .8d88.          # long-secondary .8d88.05
\u0300  ..2233          # long-tertiary ..2233
か       7916..9b        # Hiragana Ka (U+304B)
が       7916..9b .da95. # Hiragana Ga (U+304C)
\u3099  .da95.          # voiced sound mark
\u309a  .daa5.          # semi-voiced sound mark
\ua001  7a700c..        # Yi Syllable IX = long-primary 7a700C.05.05
\ua002  7a700c.. 7a7014..  # two long-primary CEs
\ua003  7a700c.. 7a7014.. 7a701c03..  # three CEs, require 64 bits
# TODO: Test long and/or duplicate expansions.

* CEs
\x01\x00b               .. 11.. 29..
äa\u0301\u0300          27.. .9d. 27.. .8d88. ..2233
a\u3099か\u3099b         27.. .da95. 7916..9b .da95. 29..
aがb                     27.. 7916..9b .da95. 29..
\ua001\ua002\ua003      7a700c..  7a700c.. 7a7014..  7a700c.. 7a7014.. 7a701c03..

# TODO: Test U+0000, U+FFFE, U+FFFF
# TODO: Interesting FCD tests
# TODO: Try combinations of base vs. tailoring for discontiguous & nested contractions,
#       to test fallbacks and fetching inner CEs from the original data.
# TODO: Test CODAN with first digit in base and others in tailoring.
# TODO: Test prefix, contraction+expansion, prefix+contraction, p+c+e
# TODO: Test Hangul syllables with * CEs

** test: contractions
@ rawbase

# Contractions starting with 'a' should not continue with any character < U+0300
# so that we can test a shortcut for that.
a                   27..
b                   29..
bz                  2a03..
d                   2d..
dz\u0301            2e03..      # d+z+acute
z                   59..
a\u0301             5a03..      # a+acute sorts after z
a\u0301\u0301       5a04..      # a+acute+acute
a\u0301\u0301\u0358 5a05..      # a+acute+acute+dot above right
a\u030a             5a14..      # a+ring
a\u0323             5a15..      # a+dot below
a\u0323\u0358       5a16..      # a+dot below+dot above right
a\u0327\u0323\u030a 5a17..      # a+cedilla+dot below+ring
a\u0327\u0323bz     5a18..      # a+cedilla+dot below+b+z

\U0001D158          0dc9fc..    # musical notehead black
\U0001D158\U0001D165 0dc9fd..   # musical quarter note

# deliberately missing prefix contractions:
# az
# a\u0327
# a\u0327\u0323
# a\u0327\u0323b

\U0001D165          ..1f        # musical stem (ccc=216)
\U0001D16D          ..20        # musical augmentation dot (ccc=226)
\U0001D165\U0001D16D ..21       # stem+dot (ccc=216 226)
\u0301              .8d.        # acute (ccc=230)
\u030a              .99.        # ring (ccc=230)
\u0308              .9d.        # diaeresis (ccc=230)
\u0308\u0301        .9e.        # diaeresis+acute (=dialytika tonos) (ccc=230 230)
\u0327              .a7.        # cedilla (ccc=202)
\u0323              .c5.        # dot below (ccc=220)
\u0331              .d01d.      # macron below (ccc=220)
\u0331\u0358        .d01e.      # macron below+dot above right (ccc=220 232)
\u0334              .d02d.      # tilde overlay (ccc=1)
\u0358              .d06d.      # dot above right (ccc=232)

\u0f71              74aa..      # tibetan vowel sign aa
\u0f72              74ac..      # tibetan vowel sign i
\u0f71\u0f72        74ae..      # tibetan vowel sign aa + i = ii
\u0f73              74ae..      # tibetan vowel sign ii (ccc=0 but lccc=129)

** test: simple contractions

# Some strings are chosen to cause incremental contiguous contraction matching to
# go into partial matches for prefixes of contractions
# (where the prefixes are deliberately not also contractions).
# When there is no complete match, then the matching code must back out of those
# so that discontiguous contractions work as specified.

* CEs
# contraction starter with no following text, or mismatch, or blocked
a                       27..
aa                      27.. 27..  
ab                      27.. 29..
az                      27.. 59..
a\u0308\u030a           27.. .9d. .99.  # ring blocked by diaeresis
a\u0327                 27.. .a7.
\u0308                  .9d.
\u0308\u030a\u0301      .9d. .99. .8d.  # acute blocked by ring
\U0001D158              0dc9fc..

# no discontiguous contraction because of missing prefix contraction d+z,
# and a starter ('z') after the 'd'
dz\u0323\u0301          2d.. 59.. .c5. .8d.

# contiguous contractions
abz                     27.. 2a03..
abzz                    27.. 2a03.. 59..
a\u0301                 5a03..
a\u0301\u0301           5a04..
a\u0301\u0301\u0358     5a05..
a\u030a                 5a14..
a\u0323\u0358           5a16..
a\u0327\u0323\u030a     5a17..  # match despite missing prefix
a\u0327\u0323bz         5a18..
\u0308\u0308\u0301      .9d. .9e.  # acute blocked from first diaeresis, contracts with second

\U0001D158\U0001D165    0dc9fd..
\U0001D165\U0001D16D    ..21

** test: discontiguous contractions
* CEs
a\u0327\u030a           5a14.. .a7.                 # a+ring skips cedilla
a\u0327\u0327\u030a     5a14.. .a7. .a7.            # a+ring skips 2 cedillas
a\u0327\u0327\u0327\u030a  5a14.. .a7. .a7. .a7.    # a+ring skips 3 cedillas
a\u0334\u0327\u0327\u030a  5a14.. .d02d. .a7. .a7.  # a+ring skips tilde overlay & 2 cedillas
a\u0327\u0323           5a15.. .a7.                 # a+dot below skips cedilla
a\u0334\u0323\u0358     5a16.. .d02d.               # a+dot below skips tilde overlay
a\u0323\u0301\u0358     5a16.. .8d.                 # a+dot below+dot ab.r.: 2-char match, then skips acute
\u0331\u0331\u0358      .d01e. .d01d.               # macron below+dot ab.r. skips the second macron below

a\u0334\u0327\u0323\u030a   5a15.. .d02d. .a7. .99. # a+dot below skips tilde overlay & cedilla
a\u0327\u0327\u0323\u030a   5a15.. .a7. .a7. .99.   # a+dot below skips 2 cedillas
a\u0327\u0323\u0323\u030a   5a15.. .a7. .c5. .99.   # a+dot below skips cedilla
a\u0327\u0323\U0001D16D\u030a 5a15.. .a7. ..20 .99. # a+dot below skips cedilla
a\u0327\u0331\u0323\u030a   5a14.. .a7. .d01d. .c5. # a+ring skips cedilla macron below, dot below (dot blocked by macron)

\U0001D158\u0327\U0001D165  0dc9fd.. .a7.           # quarter note skips cedilla
a\U0001D165\u0323           5a15.. ..1f             # a+dot below skips stem

# partial contiguous match, backs up, matches discontiguous contraction
a\u0327\u0323b              5a15.. .a7. 29..
a\u0327\u0323ba             5a15.. .a7. 29.. 27..

# a+acute+acute+dot above right skips cedilla, continues matching 2 same-ccc combining marks
a\u0327\u0301\u0301\u0358   5a05.. .a7.

# FCD but not NFD
a\u0f73\u0301               5a03.. 74ae..           # a+acute skips tibetan ii

# FCD but the 0f71 inside the 0f73 must be skipped
# to match the discontiguous contraction of the first 0f71 with the trailing 0f72 inside the 0f73
\u0f71\u0f73                74ae.. 74aa..           # == \u0f73\u0f71 == \u0f71\u0f71\u0f72

** test: discontiguous contractions with nested contractions
* CEs
a\u0323\u0308\u0301\u0358   5a16.. .9e.
a\u0323\u0308\u0301\u0308\u0301\u0358   5a16.. .9e. .9e.

** test: discontiguous contractions with interleaved contractions
* CEs
# a+ring & cedilla & macron below+dot above right
a\u0327\u0331\u030a\u0358   5a14.. .a7. .d01e.

# a+ring & 1x..3x macron below+dot above right
a\u0331\u030a\u0358                             5a14.. .d01e.
a\u0331\u0331\u030a\u0358\u0358                 5a14.. .d01e. .d01e.
# also skips acute
a\u0331\u0331\u0331\u030a\u0301\u0358\u0358\u0358  5a14.. .d01e. .d01e. .d01e. .8d.

# a+dot below & stem+augmentation dot, followed by contiguous d+z+acute
a\U0001D165\u0323\U0001D16Ddz\u0301             5a15.. ..21 2e03..

** test: some simple string comparisons
@ root
* compare
# first string compares against ""
= \u0000
< a
<1 b
<3 B
= \u0000B\u0000

** test: compare with strength=primary
% strength=primary
* compare
<1 a
<1 b
= B

** test: compare with strength=secondary
% strength=secondary
* compare
<1 a
<1 b
= B

** test: compare with strength=tertiary
% strength=tertiary
* compare
<1 a
<1 b
<3 B

** test: compare with strength=quaternary
% strength=quaternary
* compare
<1 a
<1 b
<3 B

** test: compare with strength=identical
% strength=identical
* compare
<1 a
<1 b
<3 B

** test: côté with forwards secondary
@ root
* compare
<1 cote
<2 coté
<2 côte
<2 côté

** test: côté with forwards secondary vs. U+FFFE merge separator
# Merged sort keys: On each level, any difference in the first segment
# must trump any further difference.
* compare
<1 cote\uFFFEcôté
<2 coté\uFFFEcôte
<2 côte\uFFFEcoté
<2 côté\uFFFEcote

** test: côté with backwards secondary
% backwards=on
* compare
<1 cote
<2 côte
<2 coté
<2 côté

** test: côté with backwards secondary vs. U+FFFE merge separator
# Merged sort keys: On each level, any difference in the first segment
# must trump any further difference.
* compare
<1 cote\uFFFEcôté
<2 côte\uFFFEcoté
<2 coté\uFFFEcôte
<2 côté\uFFFEcote

** test: U+FFFE on identical level
@ root
% strength=identical
* compare
# All of these control codes are completely-ignorable, so that
# their low code points are compared with the merge separator.
# The merge separator must compare less than any other character.
<1 \uFFFE\u0001\u0002\u0003
<i \u0001\uFFFE\u0002\u0003
<i \u0001\u0002\uFFFE\u0003
<i \u0001\u0002\u0003\uFFFE

* compare
# The merge separator must even compare less than U+0000.
<1 \uFFFE\u0000\u0000
<i \u0000\uFFFE\u0000
<i \u0000\u0000\uFFFE

** test: Hani < surrogates < U+FFFD
# Note: compareUTF8() treats unpaired surrogates like U+FFFD,
# so with that the strings with surrogates will compare equal to each other
# and equal to the string with U+FFFD.
@ root
% strength=identical
* compare
<1 abz
<1 a\u4e00z
<1 a\U00020000z
<1 a\ud800z
<1 a\udbffz
<1 a\udc00z
<1 a\udfffz
<1 a\ufffdz

** test: script reordering
@ root
% reorder Hani Zzzz digit
* compare
<1 ?
<1 +
<1 丂
<1 a
<1 α
<1 5

% reorder default
* compare
<1 ?
<1 +
<1 5
<1 a
<1 α
<1 丂

** test: tertiary CEs, tertiary, caseLevel=off, caseFirst=lower
@ root
# TODO: replace hack with real tailoring of U+FFF1 & U+FFF2 (or other characters) to tertiary CEs
% caseFirst=lower
* compare
<1 aa
<3 aa\uFFF1
<3 aa\uFFF2
<3 aA
<3 aA\uFFF1
<3 a\uFFF1a
<3 a\uFFF2a

** test: tertiary CEs, tertiary, caseLevel=off, caseFirst=upper
% caseFirst=upper
* compare
<1 aA
<3 aA\uFFF1
<3 aa
<3 aa\uFFF1
<3 aa\uFFF2
<3 a\uFFF1a
<3 a\uFFF2a


** test: this is a description
@ rawbase
# string then list of CEs; empty leading weight=0, other empty=common
a 20..
b 2233.44.5506
c 11223344.5566.07
# ch 30..20
# l|\xb7 ..   # prefix
\u3041 74..

# rawbase could be combined with rules
# each test has rawbase? rules? (attributes (compare | CEs | sortkey))*

#% attribute=value
#% strength=3
# allow changing attributes between "* compare" etc. but not inside any section
# (an attribute ends a section, just like starting a section ends the previous one)

# * CEs  # not sensitive to many attributes, e.g., strength
#abch 20.. 22.. 30..20
#\u3041 74H  # with Hiragana flag

#* sortkey
#abch 202230.(syntax for compressed common?).(?)20

** test: from rules
#@ rules
#&z < a <<< A
# allow comments
#< b <<< B

** test: German phonebook rules

#@ locale de-u-co-phonebk

# * compare
#...
